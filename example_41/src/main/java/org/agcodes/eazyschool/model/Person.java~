package org.agcodes.eazyschool.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Transient;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import org.agcodes.eazyschool.annotation.FieldsValueMatch;
import org.agcodes.eazyschool.annotation.PasswordValidator;
import org.agcodes.eazyschool.validationGroup.OnCreate;

@Data
@Entity
@FieldsValueMatch.List({
    @FieldsValueMatch(
        field = "pwd",
        fieldMatch = "confirmPwd",
        message = "Passwords don't match!",
        groups = OnCreate.class
    ),
    @FieldsValueMatch(
        field="email",
        fieldMatch = "confirmEmail",
        message = "Email addresses don't match",
        groups = OnCreate.class
    )
}
)
public class Person extends BaseEntity{

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int personId;

    // No cascade config. related : as the person won't create a new class he can be assigned only to an existing one
    @ManyToOne(
        fetch = FetchType.LAZY,
        optional = true // can be null as the student won't have a class when he registers
    )
    @JoinColumn(
        name = "class_id", // foreign key column in this table
//        columnDefinition = "classId", // SQL type for Entity A's FK column (optional)
        referencedColumnName= "class_id", // In Entity B's table in db (optional, defaults to PK)
        nullable = true
    )
    /*@RestController or @ResponseBody - You're building REST APIs and returning entities (from Jackson)*/
//    @JsonBackReference
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private EazyClass eazyClass;

    @OneToOne(
        fetch = FetchType.EAGER,
        cascade = CascadeType.PERSIST,
        targetEntity = Roles.class
    )
    @JoinColumn(
        name = "role_id", // Parent table in db
        columnDefinition = "roleId",
        nullable = false
    )
    private Roles roles;

    @OneToOne(
        fetch = FetchType.EAGER,
        cascade = CascadeType.ALL,
        targetEntity = Address.class
//        orphanRemoval = true // Delete the old address and the cascade will Create a new address with new id
    )
    @JoinColumn(
        name="address_id",
        referencedColumnName= "addressId",
//        columnDefinition = "addressId",
        nullable = true
    )
    private Address address;

    @NotBlank(message = "Name must not be blank")
    @Size(min=3, message="Name must be at least 3 characters long")
    private String name;

    @NotBlank(message = "Mobile number must not be blank")
    @Pattern(regexp = "(^$|[0-9]{10})", message="Mobile number must be 10 digits")
    private String mobileNumber;

    @NotBlank(message = "Email must not be blank")
    @Email(message = "Please provide a valid email address")
    private String email;

    @NotBlank(message = "Confirm Email must not be blank",groups = OnCreate.class)
    @Email(message = "Please provide a valid confirm email address")
    @Transient
    private String confirmEmail;

    @NotBlank(message = "Password must not be blank")
    @Size(min=5, message="Password must be at least 5 characters long")
    @PasswordValidator // Validate password strength
    private String pwd;

    @NotBlank(message = "Confirm Password must not be blank",groups = OnCreate.class)
    @Size(min=5, message="Confirm Password must be at least 5 characters long")
    @Transient
    private String confirmPwd;

}
